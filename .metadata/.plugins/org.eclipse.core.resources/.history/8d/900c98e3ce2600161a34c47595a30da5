package jammazwan;

import java.util.Map;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;

import jammazwan.util.ReadMeGenerate;
import jammazwan.util.Utils;

public class InputRouteBuilder extends RouteBuilder {
	String abcPrefix;
	ReadMeGenerate readMeGenerator;
	String rootDir;

	public InputRouteBuilder(Map<String, String> replacements) {
		this.abcPrefix = replacements.get("pckg");
		this.readMeGenerator = new ReadMeGenerate(abcPrefix);
		this.rootDir = "" + readMeGenerator.getName() + "/";
	}

	public void configure() {

		/*
		 * First three are velocity templates, where substitutions are made
		 */
		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=README.txt.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/README.txt.vm")
				.process(getProcessor(rootDir)).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=pom.xml.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/pom.xml.vm").process(getProcessor(rootDir))
				.to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=project.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/project.vm")
				.process(getProcessor(rootDir + ".")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=camel-context.xml.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/camel-context.xml.vm")
				.process(getProcessor(rootDir + "src/main/resources/META-INF/spring/")).to(getFolder());

		/*
		 * This group consumes 3letter name to rename file
		 */
		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=Routes.java.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/Routes.java.vm")
				.process(getProcessor(rootDir + "src/main/java/jammazwan/" + abcPrefix + "/")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=Test.java.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/Test.java.vm")
				.process(getProcessor(rootDir + "src/test/java/jammazwan/" + abcPrefix + "/")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=Bean.java.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/Bean.java.vm")
				.process(getProcessor(rootDir + "src/main/java/jammazwan/" + abcPrefix + "/")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=Processor.java.vm")
				.process(getVelocityMapProcessor()).to("velocity://velocity/Processor.java.vm")
				.process(getProcessor(rootDir + "src/main/java/jammazwan/" + abcPrefix + "/")).to(getFolder());

		/*
		 * Remaining are straight file copy and rename. Creation of empty
		 * folders done with .gitkeep file, per normal conventions
		 */
		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=gitkeep2.vm")
				.process(getProcessor(rootDir + "src/test/resources/.")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=classpath.vm")
				.to("velocity://velocity/classpath.vm").process(getProcessor(rootDir + ".")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=gitkeep3.vm")
				.process(getProcessor(rootDir + "src/main/resources/META-INF/spring/.")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=log4j.properties.vm")
				.process(getProcessor(rootDir + "src/main/resources/")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=gitkeep5.vm")
				.process(getProcessor(rootDir + "src/test/java/jammazwan/" + abcPrefix + "/.")).to(getFolder());

		from("file:src/main/resources/velocity?noop=true&delete=false&fileName=gitkeep1.vm")
				.process(getProcessor(rootDir + "src/main/java/jammazwan/" + abcPrefix + "/.")).to(getFolder());
	}

	private Processor getProcessor(final String prefix) {
		return new Processor() {
			public void process(Exchange exchange) throws Exception {
				String fileName = "" + exchange.getIn().getHeader("CamelFileName");
				fileName = fileName.substring(0, fileName.length() - 3);
				exchange.getIn().setHeader("CamelFileName", constant(prefix + getFileName(abcPrefix, fileName)));
			}
		};
	}

	protected String getFileName(String prefix, String fileName) {
		if (fileName.endsWith("java")) {
			return Utils.upLow(prefix) + fileName;
		} else {
			return fileName;
		}
	}

	private Processor getVelocityMapProcessor() {
		return new Processor() {
			public void process(Exchange exchange) throws Exception {
				exchange.getIn().setHeader("readme", readMeGenerator.getString());
				exchange.getIn().setHeader("projectname", readMeGenerator.getName());
				exchange.getIn().setHeader("pckg", abcPrefix);
				exchange.getIn().setHeader("FileNamePrefix", Utils.upLow(abcPrefix));
			}
		};
	}

	String getFolder() {
		return "file://generated";
	}

}
